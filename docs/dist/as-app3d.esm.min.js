import dat from"https://unpkg.com/dat.gui/build/dat.gui.module.js";import THREE from"../dist/three.wrapper.js";import"../dist/OrbitControls.wrapper.js";const util={typeOf:t=>({}).toString.call(t).match(/\s(\w+)/)[1].toLowerCase(),isOneOfTypes:(t,e)=>e.includes(util.typeOf(t)),isUintArray:t=>/^uint.*array$/.test(util.typeOf(t)),isIntArray:t=>/^int.*array$/.test(util.typeOf(t)),isFloatArray:t=>/^float.*array$/.test(util.typeOf(t)),isImage:t=>"image"===util.typeOf(t),isImageable:t=>util.isOneOfTypes(t,["image","htmlimageelement","htmlcanvaselement"]),isTypedArray:t=>"arraybuffer"===util.typeOf(t.buffer),isInteger:Number.isInteger||(t=>Math.floor(t)===t),isString:t=>"string"===util.typeOf(t),isObject:t=>"object"===util.typeOf(t),typeName:t=>t.constructor.name,isLittleEndian(){const t=new Uint32Array([16909060]);return 4===new Uint8ClampedArray(t.buffer)[0]},inNode:()=>"undefined"==typeof window&&"undefined"!=typeof global,inBrowser:()=>!util.inNode(),globalObject:()=>util.inNode()?global:window,identity:t=>t,noop:()=>{},propFcn:t=>e=>e[t],convertArray:(t,e)=>t.constructor===e?t:e.from(t),arrayToBuffer:(t,e=Float64Array)=>(t.constructor===Array&&(t=new e(t)),new Uint8Array(t.buffer)),bufferToArray:(t,e,s=Float64Array)=>(e===Array&&(e=s),e===Array?Array.from(new s(t.buffer)):new e(t.buffer)),bufferToBase64(t){const e=Array.prototype.map.call(t,t=>String.fromCharCode(t)).join("");return btoa(e)},base64ToBuffer(t){const e=atob(t),s=new Uint8Array(e.length);return Array.prototype.forEach.call(e,(t,e)=>{s[e]=t.charCodeAt(0)}),s},randomSeedSin:(t=Math.PI/4)=>()=>{const e=1e4*Math.sin(t++);return e-Math.floor(e)},randomSeedParkMiller:(t=123456)=>(t%=2147483647,()=>((t=16807*t%2147483647)-1)/2147483646),randomSeed(t,e=!0){Math.random=e?this.randomSeedParkMiller(t):this.randomSeedSin(t)},logOnce(t){this.logOnceMsgSet||(this.logOnceMsgSet=new Set),this.logOnceMsgSet.has(t)||(console.log(t),this.logOnceMsgSet.add(t))},warn(t){this.logOnce("Warning: "+t)},print(t,e=null){this.isObject(t)&&(t=JSON.stringify(t)),!e&&this.inBrowser()&&(e=document.body),e?(e.style.fontFamily="monospace",e.innerHTML+=t+"<br />"):console.log(t)},timeit(t,e=1e5,s="test"){console.time(s);for(let s=0;s<e;s++)t(s);console.timeEnd(s)},fps(){const t=performance.now();let e=0;return function s(){e++;const r=performance.now()-t,i=parseFloat((e/(r/1e3)).toFixed(2));Object.assign(s,{fps:i,ms:r,steps:e})}},pps(t,e=""){e&&console.log(e);let s=1,r="";for(;t;){if("function"==typeof t)r=t.constructor.toString();else{const e=Object.keys(t);r=e.length>0?`[${e.join(", ")}]`:`[${t.constructor.name}]`}console.log(`[${s++}]: ${r}`),t=Object.getPrototypeOf(t)}},arraysToString:t=>t.map(t=>`[${t}]`).join(","),toWindow(t){Object.assign(this.globalObject(),t),console.log("toWindow:",Object.keys(t).join(", "))},objectToString:t=>JSON.stringify(t,null,"  ").replace(/ {2}"/g,"  ").replace(/": /g,": "),objectToString1:t=>JSON.stringify(t).replace(/{"/g,"{").replace(/,"/g,",").replace(/":/g,":"),parseQueryString(){const t={};return document.location.search.substring(1).split("&").forEach(e=>{const s=e.split("=");t[s[0]]=1===s.length||s[1]}),t},setScript(t,e={}){const s=document.createElement("script");s.src=t,Object.assign(s,e),document.querySelector("head").appendChild(s)},getEventXY(t,e){const s=t.getBoundingClientRect();return[e.clientX-s.left,e.clientY-s.top]},randomInt:t=>Math.floor(Math.random()*t),randomInt2:(t,e)=>t+Math.floor(Math.random()*(e-t)),randomFloat:t=>Math.random()*t,randomFloat2:(t,e)=>t+Math.random()*(e-t),randomCentered:t=>util.randomFloat2(-t/2,t/2),randomNormal(t=0,e=1){const[s,r]=[1-Math.random(),Math.random()];return Math.sqrt(-2*Math.log(s))*Math.cos(2*Math.PI*r)*e+t},isPowerOf2:t=>0==(t&t-1),nextPowerOf2:t=>Math.pow(2,Math.ceil(Math.log2(t))),mod:(t,e)=>(t%e+e)%e,wrap:(t,e,s)=>e+util.mod(t-e,s-e),clamp:(t,e,s)=>t<e?e:t>s?s:t,between:(t,e,s)=>e<=t&&t<=s,lerp:(t,e,s)=>t<=e?t+(e-t)*s:t-(t-e)*s,lerpScale:(t,e,s)=>(t-e)/(s-e),radians:t=>t*Math.PI/180,degrees:t=>180*t/Math.PI,heading(t){const e=this.degrees(t);return this.mod(90-e,360)},angle(t){const e=this.mod(360-t,360);return this.radians(e)},subtractRadians(t,e){let s=this.mod(t-e,2*Math.PI);return s>Math.PI&&(s-=2*Math.PI),s},subtractHeadings(t,e){let s=this.mod(t-e,360);return s>180&&(s-=360),s},radiansToward:(t,e,s,r)=>Math.atan2(r-e,s-t),headingToward(t,e,s,r){return this.heading(this.radiansToward(t,e,s,r))},distance:(t,e,s,r)=>Math.sqrt(util.sqDistance(t,e,s,r)),sqDistance:(t,e,s,r)=>(t-s)*(t-s)+(e-r)*(e-r),inCone(t,e,s,r,i,n,o){if(this.sqDistance(n,o,t,e)>s*s)return!1;const h=this.radiansToward(n,o,t,e);return r/2>=Math.abs(this.subtractRadians(i,h))},objectPropertyTypes(t){const e=Object.keys(t),s={};for(const r of e)s[r]=this.typeOf(t[r]);return s},repeat(t,e,s=[]){for(let r=0;r<t;r++)e(r,s);return s},step(t,e,s){for(let r=0;r<t;r+=e)s(r)},range(t){return this.repeat(t,(t,e)=>{e[t]=t})},arrayMax:t=>t.reduce((t,e)=>Math.max(t,e)),arrayMin:t=>t.reduce((t,e)=>Math.min(t,e)),arraySum:t=>t.reduce((t,e)=>t+e),arraysEqual(t,e){if(t.length!==e.length)return!1;for(let s=0;s<t.length;s++)if(t[s]!==e[s])return!1;return!0},removeArrayItem(t,e){const s=t.indexOf(e);return-1!==s?t.splice(s,1):this.warn(`removeArrayItem: ${e} not in array`),t},forEach(t,e){if(t.slice)for(let s=0,r=t.length;s<r;s++)e(t[s],s,t);else Object.keys(t).forEach(s=>e(t[s],s,t));return t},clone:t=>t.slice(0),concatArrays(t,e){const s=t.constructor;if(s===Array)return t.concat(this.convertArray(e,Array));const r=new s(t.length+e.length);return r.set(t),r.set(e,t.length),r},objectsEqual:(t,e)=>JSON.stringify(t)===JSON.stringify(e),histogram(t,e=1,s=Math.floor(this.arrayMin(t))){const r=[];let[i,n]=[Number.MAX_VALUE,Number.MIN_VALUE],[o,h]=[Number.MAX_VALUE,Number.MIN_VALUE];for(const a of t){const t=Math.floor(a/e)-s;r[t]=void 0===r[t]?1:r[t]+1,i=Math.min(i,t),n=Math.max(n,t),o=Math.min(o,a),h=Math.max(h,a)}for(const t in r)void 0===r[t]&&(r[t]=0);return{bins:n-i+1,minBin:i,maxBin:n,minVal:o,maxVal:h,hist:r}},oneOf:t=>t[util.randomInt(t.length)],otherOneOf(t,e){if(t.length<2)throw Error("util.otherOneOf: array.length < 2");do{var s=this.oneOf(t)}while(e===s);return s},oneKeyOf:t=>util.oneOf(Object.keys(t)),oneValOf:t=>t[util.oneKeyOf(t)],sortNums:(t,e=!0)=>t.sort((t,s)=>e?t-s:s-t),sortObjs(t,e,s=!0){"string"==typeof e&&(e=this.propFcn(e));const r=(t,s)=>e(t)-e(s);return t.sort((t,e)=>s?r(t,e):-r(t,e))},shuffle(t){for(let e=t.length-1;e>0;e--){const s=Math.floor(Math.random()*(e+1)),r=t[e];t[e]=t[s],t[s]=r}return t},uniq(t,e=this.identity){return this.isString(e)&&(e=this.propFcn(e)),t.filter((t,s,r)=>0===s||e(t)!==e(r[s-1]))},aRamp(t,e,s){if(s<=1)throw Error("aRamp: numItems must be > 1");const r=[];for(let i=0;i<s;i++)r.push(t+i/(s-1)*(e-t));return r},aIntRamp(t,e,s=Math.abs(e-t)+1){return this.aRamp(t,e,s).map(t=>Math.round(t))},normalize(t,e=0,s=1){const[r,i]=[this.arrayMin(t),this.arrayMax(t)],n=1/(i-r);return t.map(t=>this.lerp(e,s,n*(t-r)))},normalize8(t){return new Uint8ClampedArray(this.normalize(t,-.5,255.5))},normalizeInt(t,e,s){return this.normalize(t,e,s).map(t=>Math.round(t))},imagePromise:t=>new Promise((e,s)=>{const r=new Image;r.crossOrigin="Anonymous",r.onload=(()=>e(r)),r.onerror=(()=>s(Error(`Could not load image ${t}`))),r.src=t}),xhrPromise:(t,e="text",s="GET")=>new Promise((r,i)=>{const n=new XMLHttpRequest;n.open(s,t),n.responseType=e,n.onload=(()=>r(n.response)),n.onerror=(()=>i(Error(`Could not load ${t}: ${n.status}`))),n.send()}),timeoutPromise:(t=1e3)=>new Promise(e=>{setTimeout(e,t)}),async timeoutLoop(t,e=-1,s=0){let r=0;for(;r++!==e;)t(r),await this.timeoutPromise(s)},yieldLoop(t,e=-1){let s=0;const r=function*(){for(;s++!==e;)yield t(s)}();for(;!r.next().done;);},rafPromise:()=>new Promise(t=>requestAnimationFrame(t)),async rafLoop(t,e=-1){let s=0;for(;s++!==e;)t(s),await this.rafPromise()},waitPromise:(t,e=10)=>new Promise(s=>{!function r(){if(t())return s();setTimeout(r,e)}()}),createCanvas(t,e){const s=document.createElement("canvas");return Object.assign(s,{width:t,height:e}),s},createCtx(t,e){return this.createCanvas(t,e).getContext("2d")},cloneCtx(t){const e=this.createCtx(t.canvas.width,t.canvas.height);return e.drawImage(t.canvas,0,0),e},resizeCtx(t,e,s){const r=this.cloneCtx(t);t.canvas.width=e,t.canvas.height=s,t.drawImage(r.canvas,0,0)},setIdentity(t){t.save(),t.setTransform(1,0,0,1,0,0)},setTextParams(t,e,s="center",r="middle"){Object.assign(t,{font:e,textAlign:s,textBaseline:r})},ctxImageData:t=>t.getImageData(0,0,t.canvas.width,t.canvas.height),fillCtxWithImage(t,e){this.setIdentity(t),t.drawImage(e,0,0,t.canvas.width,t.canvas.height),t.restore()}};class AgentArray extends Array{static fromArray(t){return Object.setPrototypeOf(t,AgentArray.prototype),t}toArray(){return Object.setPrototypeOf(this,Array.prototype),this}isEmpty(){return 0===this.length}first(){return this[0]}last(){return this[this.length-1]}props(t){const e=new AgentArray(this.length);for(let s=0;s<this.length;s++)e[s]=this[s][t];return e}values(t){const e=new AgentArray(this.length);for(let s=0;s<this.length;s++)e[s]=t(this[s]);return e}uniq(t=util.identity){return util.isString(t)&&(t=(e=>e[t])),this.filter((e,s,r)=>0===s||t(e)!==t(r[s-1]))}each(t){for(let e=0,s=this.length;e<s;e++)t(this[e],e,this)}ask(t){const e=this.length;for(let s=0;s<Math.min(e,this.length);s++)if(t(this[s],s,this),e!=this.length){const t=this.name||this.constructor.name,s=this.length<e?"decreasing":"increasing";util.warn(`AgentArray.ask array mutation: ${t}: ${s}`)}}count(t){return this.reduce((e,s)=>e+(t(s)?1:0),0)}sum(t){return this.reduce((e,s)=>e+(t?s[t]:s),0)}avg(t){return this.sum(t)/this.length}min(t){return this.reduce((e,s)=>Math.min(e,t?s[t]:s),1/0)}max(t){return this.reduce((e,s)=>Math.max(e,t?s[t]:s),-1/0)}histogram(t,e=10,s=this.min(t),r=this.max(t)){const i=(r-s)/e,n=new AgentArray(e);return n.fill(0),this.ask(o=>{const h=t?o[t]:o;if(h<s||h>r)util.warn(`histogram bounds error: ${h}: ${s}-${r}`);else{let t=Math.floor((h-s)/i);t===e&&t--,n[t]++}}),n.parameters={key:t,bins:e,min:s,max:r,binSize:i,arraySize:this.length},n}clone(t=0,e=this.length){return this.slice(t,e)}shuffle(){return util.shuffle(this)}sortBy(t,e=!0){return util.sortObjs(this,t,e),this}remove(t,e){const s=this.agentIndex(t,e);return-1!==s?this.splice(s,1):util.warn(`remove: ${t} not in AgentArray`),this}insert(t,e){const s=this.sortedIndex(t,e);if(this[s]===t)throw Error("insert: item already in AgentArray");this.splice(s,0,t)}sortedIndex(t,e=util.identity){util.isString(e)&&(e=util.propFcn(e));const s=e(t);let r=0,i=this.length;for(;r<i;){const t=r+i>>>1;e(this[t])<s?r=t+1:i=t}return r}agentIndex(t,e){if(!e)return this.indexOf(t);const s=this.sortedIndex(t,e);return this[s]===t?s:-1}contains(t,e){return this.agentIndex(t,e)>=0}oneOf(){return util.oneOf(this)}otherOneOf(t){return util.otherOneOf(this,t)}otherNOf(t,e){if(this.length<t)throw Error("AgentArray: otherNOf: length < N");return this.clone().remove(e).shuffle().slice(0,t)}minOrMaxOf(t,e,s=!1){if(this.isEmpty())throw Error("min/max OneOf: empty array");"string"==typeof e&&(e=util.propFcn(e));let r=null,i=t?1/0:-1/0;for(let s=0;s<this.length;s++){const n=this[s],o=e(n);(t&&o<i||!t&&o>i)&&([r,i]=[n,o])}return s?[r,i]:r}minOneOf(t){return this.minOrMaxOf(!0,t)}maxOneOf(t){return this.minOrMaxOf(!1,t)}minValOf(t){return this.minOrMaxOf(!0,t,!0)}maxValOf(t){return this.minOrMaxOf(!1,t,!0)}nOf(t){if(t>this.length)throw Error("nOf: n larger than AgentArray");if(t===this.length)return this;const e=new AgentArray;for(;e.length<t;){const t=this.oneOf();t in e||e.push(t)}return e}minOrMaxNOf(t,e,s){if(e>this.length)throw Error("min/max nOf: n larger than AgentArray");const r=this.clone().sortBy(s);return t?r.clone(0,e):r.clone(r.length-e)}minNOf(t,e){return this.minOrMaxNOf(!0,t,e)}maxNOf(t,e){return this.minOrMaxNOf(!1,t,e)}inRect(t,e,s=e,r=!1){const i=new AgentArray,n=t.x-e,o=t.x+e,h=t.y-s,a=t.y+s;return this.ask(e=>{n<=e.x&&e.x<=o&&h<=e.y&&e.y<=a&&(r||t!==e)&&i.push(e)}),i}inRadius(t,e,s=!1){const r=new AgentArray,i=e*e,n=util.sqDistance;return this.ask(e=>{n(t.x,t.y,e.x,e.y)<=i&&(s||t!==e)&&r.push(e)}),r}inCone(t,e,s,r,i=!1){const n=new AgentArray;return this.ask(o=>{util.inCone(o.x,o.y,e,s,r,t.x,t.y)&&(i||t!==o)&&n.push(o)}),n}}class AgentSet extends AgentArray{static get[Symbol.species](){return AgentArray}constructor(t,e,s,r=null){super(),r=r||this,Object.assign(this,{model:t,name:s,baseSet:r,AgentClass:e}),this.isBaseSet()?(this.breeds={},this.ID=0):(Object.setPrototypeOf(this,Object.getPrototypeOf(r)),this.baseSet.breeds[s]=this),this.ownVariables=[],this.agentProto=new e(this),this.protoMixin(this.agentProto,e)}protoMixin(t,e){Object.assign(t,{agentSet:this,model:this.model}),t[this.baseSet.name]=this.baseSet,e.prototype.setBreed||(Object.assign(e.prototype,{setBreed(t){t.setBreed(this)},getBreed(){return this.agentSet},isBreed(t){return this.agentSet===t}}),Object.defineProperty(e.prototype,"breed",{get:function(){return this.agentSet}}))}newBreed(t){return new AgentSet(this.model,this.AgentClass,t,this)}isBreedSet(){return this.baseSet!==this}isBaseSet(){return this.baseSet===this}withBreed(t){return this.filter(e=>e.agentSet===t)}create(){console.log(`AgentSet: Abstract method called: ${this}`)}addAgent(t){return t=t||Object.create(this.agentProto),this.isBreedSet()?this.baseSet.addAgent(t):t.id=this.ID++,this.push(t),t}clear(){for(;!this.isEmpty();)this.last().die()}removeAgent(t){return this.isBreedSet()&&this.baseSet.remove(t,"id"),this.remove(t,"id"),this}setDefault(t,e){return this.agentProto[t]=e,this}getDefault(t){return this.agentProto[t]}settingDefault(t){return null==t.id}own(t){for(const e of t.split(" "))this.setDefault(e,null),this.ownVariables.push(e)}setBreed(t){if(t.agentSet===this)return;t.agentSet.isBreedSet()&&t.agentSet.remove(t,"id"),this.isBreedSet()&&this.insert(t,"id");const e=t.agentSet.ownVariables;for(const s of e)this.ownVariables.includes(s)||delete t[s];for(const s of this.ownVariables)e.includes(s)||(t[s]=0);return Object.setPrototypeOf(t,this.agentProto)}ask(t){if(0===this.length)return;const e=this.last().id;for(let s=0;s<this.length&&this[s].id<=e;s++)t(this[s],s,this)}askSet(t){0!==this.length&&("patches"===this.name&&super.ask(t),this.isBaseSet()&&this.baseSetAsk(t),this.isBreedSet()&&this.cloneAsk(t))}baseSetAsk(t){if(0===this.length)return;const e=this.last().id;for(let s=0;s<this.length&&this[s].id<=e;s++){const e=this[s].id;for(t(this[s],s,this);s<this.length&&s>=0&&this[s].id>e;)s--}}cloneAsk(t){const e=this.clone();for(let s=0;s<e.length;s++){const r=e[s];r.breed==this&&r.id>0&&t(r,s,e)}}}class DataSet{static emptyDataSet(t,e,s){return new DataSet(t,e,new s(t*e))}constructor(t,e,s){if(s.length!==t*e)throw Error(`new DataSet length: ${s.length} !== ${t} * ${e}`);Object.assign(this,{width:t,height:e,data:s})}setName(t){return this.name=t,this}getName(){return this.name?this.name:this.makeName()}makeName(){const{width:t,height:e}=this,s=util.arraySum(this.data).toFixed(2);return`${this.dataType().name}-${t}-${e}-${s}`}checkXY(t,e){if(!this.inBounds(t,e))throw Error(`DataSet: x,y out of range: ${t}, ${e}`)}inBounds(t,e){return util.between(t,0,this.width-1)&&util.between(e,0,this.height-1)}dataType(){return this.data.constructor}type(){return this.constructor}toIndex(t,e){return t+e*this.width}toXY(t){return[t%this.width,Math.floor(t/this.width)]}getXY(t,e){return this.data[this.toIndex(t,e)]}setXY(t,e,s){this.data[this.toIndex(t,e)]=s}sample(t,e,s=!0){return this.checkXY(t,e),s?this.nearest(t,e):this.bilinear(t,e)}nearest(t,e){return this.getXY(Math.round(t),Math.round(e))}bilinear(t,e){const s=Math.floor(t),r=Math.floor(e),i=this.toIndex(s,r),n=this.width,o=t-s,h=e-r,a=1-o,l=1-h;return this.data[i]*a*l+(this.data[i+1]||0)*o*l+(this.data[i+n]||0)*a*h+(this.data[i+1+n]||0)*o*h}copy(){return new DataSet(this.width,this.height,util.clone(this.data))}emptyDataSet(t,e,s=this.dataType()){return DataSet.emptyDataSet(t,e,s)}emptyArray(t){return new(this.type())(t)}resample(t,e,s=!0,r=Array){if(t===this.width&&e===this.height)return this.copy();const i=DataSet.emptyDataSet(t,e,r),n=(this.width-1)/(t-1),o=(this.height-1)/(e-1);for(let r=0;r<e;r++)for(let e=0;e<t;e++)i.setXY(e,r,this.sample(e*n,r*o,s));return i}scale(t,e){const s=this.min(),r=(e-t)/(this.max()-s),i=t-r*s;return this.map(t=>r*t+i)}subset(t,e,s,r){if(t+s>this.width||e+r>this.height)throw Error("DataSet.subSet: params out of range");const i=this.emptyDataSet(s,r);for(let n=0;n<s;n++)for(let s=0;s<r;s++)i.setXY(n,s,this.getXY(n+t,s+e));return i}map(t){return new DataSet(this.width,this.height,this.data.map(t))}col(t){const[e,s,r]=[this.width,this.height,this.data];if(t>=e)throw Error(`col: x out of range width: ${e} x: ${t}`);const i=this.emptyArray(s);for(let n=0;n<s;n++)i[n]=r[t+n*e];return i}row(t){const[e,s]=[this.width,this.height];if(t>=s)throw Error(`row: y out of range height: ${s} x: ${t}`);return this.data.slice(t*e,(t+1)*e)}convertType(t){this.data=util.convertArray(this.data,t)}concatEast(t){const[e,s]=[this.width,this.height],[r,i]=[t.width,t.height];if(s!==i)throw Error(`concatEast: heights not equal ${s}, ${i}`);const n=this.emptyDataSet(e+r,s);for(let t=0;t<s;t++)for(let s=0;s<e;s++)n.setXY(t,s,this.getXY(t,s));for(let s=0;s<i;s++)for(let i=0;i<r;i++)n.setXY(s+e,i,t.getXY(s,i));return n}concatSouth(t){const[e,s,r]=[this.width,this.height,this.data];if(e!==t.width)throw Error(`concatSouth: widths not equal ${e}, ${t.width}`);const i=util.concatArrays(r,t.data);return new DataSet(e,s+t.height,i)}transformCoords(t,e,s,r,i,n){return[(t-s)*(this.width-1)/i,(r-e)*(this.height-1)/n]}coordSample(t,e,s,r,i,n,o=!0){const[h,a]=this.transformCoords(t,e,s,r,i,n);return this.sample(h,a,o)}neighborhood(t,e,s=[]){s.length=0;const r=0===t||t===this.width-1||0===e||e===this.height-1;for(let i=-1;i<=1;i++)for(let n=-1;n<=1;n++){let o=t+n,h=e+i;r&&(o=util.clamp(o,0,this.width-1),h=util.clamp(h,0,this.height-1)),s.push(this.data[this.toIndex(o,h)])}return s}convolve(t,e=1,s=!1){const[r,i,n,o]=s?[1,1,this.height-1,this.width-1]:[0,0,this.height,this.width],h=this.emptyDataSet(o,n),a=h.data;let l=0;for(let s=i;s<n;s++)for(let i=r;i<o;i++){const r=this.neighborhood(i,s);let n=0;for(let e=0;e<t.length;e++)n+=t[e]*r[e];a[l++]=n*e}return h}dzdx(t=2,e=1/8){return this.convolve([-1,0,1,-t,0,t,-1,0,1],e)}dzdy(t=2,e=1/8){return this.convolve([1,t,1,0,0,0,-1,-t,-1],e)}laplace8(){return this.convolve([-1,-1,-1,-1,8,-1,-1,-1,-1])}laplace4(){return this.convolve([0,-1,0,-1,4,-1,0,-1,0])}blur(t=.0625){return this.convolve([1,2,1,2,4,2,1,2,1],t)}edge(){return this.convolve([1,1,1,1,-7,1,1,1,1])}slopeAndAspect(t=1,e=!0){const s=this.dzdx(),r=this.dzdy();let[i,n]=[[],[]];const[o,h]=[s.height,s.width];for(let a=0;a<o;a++)for(let o=0;o<h;o++){const[h,l]=[s.getXY(o,a),r.getXY(o,a)];n.push(Math.atan(util.distance(0,0,h,l))/t);let c=Math.atan2(-l,-h);e&&c<0&&(c+=2*Math.PI),i.push(c)}return{slope:n=new DataSet(h,o,n),aspect:i=new DataSet(h,o,i),dzdx:s,dzdy:r}}max(){return util.arrayMax(this.data)}min(){return util.arrayMin(this.data)}equals(t){return this.width===t.width&&this.height===t.height&&util.arraysEqual(this.data,t.data)}}class Link{static defaultVariables(){return{end0:null,end1:null,width:1}}constructor(){Object.assign(this,Link.defaultVariables())}init(t,e){this.end0=t,this.end1=e,t.links.push(this),e.links.push(this)}die(){this.agentSet.removeAgent(this),util.removeArrayItem(this.end0.links,this),util.removeArrayItem(this.end1.links,this),this.id=-1}bothEnds(){return[this.end0,this.end1]}length(){return this.end0.distance(this.end1)}otherEnd(t){if(t===this.end0)return this.end1;if(t===this.end1)return this.end0;throw Error(`Link.otherEnd: turtle not a link turtle: ${t}`)}}class Links extends AgentSet{create(t,e,s=(t=>{})){return Array.isArray(e)||(e=[e]),e.map(e=>{const r=this.addAgent();return r.init(t,e),s(r),r})}}class World{static defaultOptions(t=16,e=t){return{minX:-t,maxX:t,minY:-e,maxY:e}}constructor(t={}){Object.assign(this,World.defaultOptions()),Object.assign(this,t),this.setWorld()}setWorld(){this.numX=this.maxX-this.minX+1,this.numY=this.maxY-this.minY+1,this.width=this.numX,this.height=this.numY,this.minXcor=this.minX-.5,this.maxXcor=this.maxX+.5,this.minYcor=this.minY-.5,this.maxYcor=this.maxY+.5,this.centerX=(this.minX+this.maxX)/2,this.centerY=(this.minY+this.maxY)/2}isOnWorld(t,e){return this.minXcor<=t&&t<=this.maxXcor&&this.minYcor<=e&&e<=this.maxYcor}setCtxTransform(t,e){t.canvas.width=this.width*e,t.canvas.height=this.height*e,t.save(),t.scale(e,-e),t.translate(-this.minXcor*e,-this.maxYcor*e)}}class Patches extends AgentSet{constructor(t,e,s){super(t,e,s),this.isBreedSet()||(this.populate(),this.labels=[])}populate(){util.repeat(this.model.world.numX*this.model.world.numY,t=>{this.addAgent()})}setDefault(t,e){"color"===t?(this.ask(t=>{t.setColor(e)}),util.logOnce("patches.setDefault(color, value): color default not supported. Clearing to value")):super.setDefault(t,e)}setLabel(t,e){null==e?delete this.labels[t.id]:this.labels[t.id]=e}getLabel(t){return this.labels[t.id]}neighborsOffsets(t,e){const{minX:s,maxX:r,minY:i,maxY:n,numX:o}=this.model.world;return t===s?e===i?[-o,1-o,1]:e===n?[1,o+1,o]:[-o,1-o,1,o+1,o]:t===r?e===i?[-o-1,-o,-1]:e===n?[o,o-1,-1]:[-o-1,-o,o,o-1,-1]:e===i?[-o-1,-o,1-o,1,-1]:e===n?[1,o+1,o,o-1,-1]:[-o-1,-o,1-o,1,o+1,o,o-1,-1]}neighbors4Offsets(t,e){const s=this.model.world.numX;return this.neighborsOffsets(t,e).filter(t=>1===Math.abs(t)||Math.abs(t)===s)}neighbors(t){const{id:e,x:s,y:r}=t,i=this.neighborsOffsets(s,r),n=new AgentArray(i.length);return i.forEach((t,s)=>{n[s]=this[t+e]}),n}neighbors4(t){const{id:e,x:s,y:r}=t,i=this.neighbors4Offsets(s,r),n=new AgentArray(i.length);return i.forEach((t,s)=>{n[s]=this[t+e]}),n}randomPt(){const{minX:t,maxX:e,minY:s,maxY:r}=this.model.world;return[util.randomInt2(t,e),util.randomInt2(s,r)]}importDataSet(t,e,s=!1){if(this.isBreedSet())return util.warn("Patches: exportDataSet called with breed, using patches"),void this.baseSet.importDataSet(t,e,s);const{numX:r,numY:i}=this.model.world,n=t.resample(r,i,s);this.ask(t=>{t[e]=n.data[t.id]})}exportDataSet(t,e=Array){if(this.isBreedSet())return util.warn("Patches: exportDataSet called with breed, using patches"),this.baseSet.exportDataSet(t,e);const{numX:s,numY:r}=this.model.world;let i=this.props(t);return i=util.convertArray(i,e),new DataSet(s,r,i)}patchIndex(t,e){const{minX:s,maxY:r,numX:i}=this.model.world;return t-s+i*(r-e)}patch(t,e){if(!this.model.world.isOnWorld(t,e))return;const s=t===this.model.world.maxXcor?this.model.world.maxX:Math.round(t),r=e===this.model.world.maxYcor?this.model.world.maxY:Math.round(e);return this.patchXY(s,r)}patchXY(t,e){return this[this.patchIndex(t,e)]}patchRect(t,e,s=e,r=!0){if(t.rectCache){const i=this.cacheIndex(e,s,r),n=t.rectCache[i];if(n)return n}const i=new AgentArray;let{minX:n,maxX:o,minY:h,maxY:a}=this.model.world;n=Math.max(n,t.x-e),o=Math.min(o,t.x+e),h=Math.max(h,t.y-s),a=Math.min(a,t.y+s);for(let e=h;e<=a;e++)for(let s=n;s<=o;s++){const n=this.patchXY(s,e);(t!==n||r)&&i.push(n)}return i}patchRectXY(t,e,s,r=s,i=!0){return this.patchRect(this.patch(t,e),s,r,i)}cacheIndex(t,e=t,s=!0){return(2*t+1)*(2*e+1)+(s?0:-1)}cacheRect(t,e=t,s=!0,r=!0){const i=this.cacheIndex(t,e,s);this.ask(n=>{n.rectCache&&!r||(n.rectCache=[]);const o=this.inRect(n,t,e,s);n.rectCache[i]=o})}inRect(t,e,s=e,r=!0){const i=this.patchRect(t,e,s,r);return this.isBaseSet()?i:i.withBreed(this)}inRadius(t,e,s=!0){const r=Math.ceil(e);return this.inRect(t,r,r,s).inRadius(t,e,s)}inCone(t,e,s,r,i=!0){const n=Math.ceil(e);return this.inRect(t,n,n,i).inCone(t,e,s,r,i)}patchAtAngleAndDistance(t,e,s){let{x:r,y:i}=t;return r+=s*Math.cos(e),i+=s*Math.sin(e),this.patch(r,i)}isOnEdge(t){const{x:e,y:s}=t,{minX:r,maxX:i,minY:n,maxY:o}=this.model.world;return e===r||e===i||s===n||s===o}edgePatches(){return this.filter(t=>this.isOnEdge(t))}diffuse(t,e){this.diffuseN(8,t,e)}diffuse4(t,e){this.diffuseN(4,t,e)}diffuseN(t,e,s){if(void 0===this[0]._diffuseNext)for(let t=0;t<this.length;t++)this[t]._diffuseNext=0;for(let r=0;r<this.length;r++){const i=this[r],n=i[e]*s,o=n/t,h=8===t?i.neighbors:i.neighbors4,a=h.length;i._diffuseNext+=i[e]-n+(t-a)*o;for(let t=0;t<h.length;t++)h[t]._diffuseNext+=o}for(let t=0;t<this.length;t++){const s=this[t];s[e]=s._diffuseNext,s._diffuseNext=0}}}class Patch{static defaultVariables(){return{turtles:void 0}}constructor(){Object.assign(this,Patch.defaultVariables())}get x(){return this.id%this.model.world.numX+this.model.world.minX}get y(){return this.model.world.maxY-Math.floor(this.id/this.model.world.numX)}isOnEdge(){return this.patches.isOnEdge(this)}get neighbors(){const t=this.patches.neighbors(this);return Object.defineProperty(this,"neighbors",{value:t,enumerable:!0}),t}get neighbors4(){const t=this.patches.neighbors4(this);return Object.defineProperty(this,"neighbors4",{value:t,enumerable:!0}),t}turtlesHere(){return null==this.turtles&&(this.patches.ask(t=>{t.turtles=[]}),this.model.turtles.ask(t=>{t.patch.turtles.push(t)})),this.turtles}breedsHere(t){return this.turtlesHere().withBreed(t)}distanceXY(t,e){return util.distance(this.x,this.y,t,e)}distance(t){return this.distanceXY(t.x,t.y)}towards(t){return this.towardsXY(t.x,t.y)}towardsXY(t,e){return util.radiansToward(this.x,this.y,t,e)}patchAt(t,e){return this.patches.patch(this.x+t,this.y+e)}patchAtAngleAndDistance(t,e){return this.patches.patchAtAngleAndDistance(this,t,e)}sprout(t=1,e=this.model.turtles,s=(t=>{})){return e.create(t,t=>{t.setxy(this.x,this.y),s(t)})}}class Turtles extends AgentSet{create(t=1,e=(t=>{})){return util.repeat(t,(t,s)=>{const r=this.addAgent();r.theta=util.randomFloat(2*Math.PI),e(r),s.push(r)})}randomPt(){const{minXcor:t,maxXcor:e,minYcor:s,maxYcor:r}=this.model.world;return[util.randomFloat2(t,e),util.randomFloat2(s,r)]}inPatches(t){let e=new AgentArray;for(const s of t)e.push(...s.turtlesHere());return this.isBreedSet()&&(e=e.filter(t=>t.agentSet===this)),e}inPatchRect(t,e,s=e,r=!1){const i=this.model.patches.inRect(t.patch,e,s,!0),n=this.inPatches(i);return r||util.removeArrayItem(n,t),n}inRadius(t,e,s=!1){return this.inPatchRect(t,e,e,!0).inRadius(t,e,s)}inCone(t,e,s,r=!1){return this.inPatchRect(t,e,e,!0).inCone(t,e,s,t.theta,r)}layoutCircle(t,e=[0,0],s=Math.PI/2,r=-1){const i=2*Math.PI/this.length,[n,o]=e;this.ask((e,h)=>{e.setxy(n,o),e.theta=s+r*i*h,e.forward(t)})}}class Turtle{static defaultVariables(){return{x:0,y:0,z:0,theta:0,atEdge:"clamp"}}constructor(){Object.assign(this,Turtle.defaultVariables())}die(){if(this.agentSet.removeAgent(this),this.hasOwnProperty("links"))for(;this.links.length>0;)this.links[0].die();null!=this.patch.turtles&&util.removeArrayItem(this.patch.turtles,this),this.id=-1}hatch(t=1,e=this.agentSet,s=(t=>{})){return e.create(t,t=>{t.setxy(this.x,this.y);for(const s of e.ownVariables)null==t[s]&&(t[s]=this[s]);s(t)})}get links(){return Object.defineProperty(this,"links",{value:new AgentArray(0),enumerable:!0}),this.links}get patch(){return this.model.patches.patch(this.x,this.y)}get heading(){return util.heading(this.theta)}set heading(t){this.theta=util.angle(t)}get direction(){return this.theta}set direction(t){this.theta=t}setxy(t,e,s=null){const r=this.patch;null!=s&&(this.z=s),this.model.world.isOnWorld(t,e)?(this.x=t,this.y=e):this.handleEdge(t,e);const i=this.patch;null!=i.turtles&&i!==r&&(util.removeArrayItem(r.turtles,this),i.turtles.push(this))}handleEdge(t,e){if(util.isString(this.atEdge)){const{minXcor:s,maxXcor:r,minYcor:i,maxYcor:n}=this.model.world;if("wrap"===this.atEdge)this.x=util.wrap(t,s,r),this.y=util.wrap(e,i,n);else{if("clamp"!==this.atEdge&&"bounce"!==this.atEdge)throw Error(`turtle.handleEdge: bad atEdge: ${this.atEdge}`);this.x=util.clamp(t,s,r),this.y=util.clamp(e,i,n),"bounce"===this.atEdge&&(this.x===s||this.x===r?this.theta=Math.PI-this.theta:this.theta=-this.theta)}}else this.atEdge(this)}moveTo(t){this.setxy(t.x,t.y)}forward(t){this.setxy(this.x+t*Math.cos(this.theta),this.y+t*Math.sin(this.theta))}rotate(t){this.theta=util.mod(this.theta+t,2*Math.PI)}right(t){this.rotate(-t)}left(t){this.rotate(t)}face(t){this.theta=this.towards(t)}faceXY(t,e){this.theta=this.towardsXY(t,e)}patchAhead(t){return this.patchAtAngleAndDistance(this.theta,t)}canMove(t){return null!=this.patchAhead(t)}patchLeftAndAhead(t,e){return this.patchAtAngleAndDistance(t+this.theta,e)}patchRightAndAhead(t,e){return this.patchAtAngleAndDistance(t-this.theta,e)}distanceXY(t,e){return util.distance(this.x,this.y,t,e)}distance(t){return util.distance(this.x,this.y,t.x,t.y)}towards(t){return this.towardsXY(t.x,t.y)}towardsXY(t,e){return util.radiansToward(this.x,this.y,t,e)}patchAt(t,e){return this.model.patches.patch(this.x+t,this.y+e)}patchAtAngleAndDistance(t,e){return this.model.patches.patchAtAngleAndDistance(this,t,e)}otherEnd(t){return t.end0===this?t.end1:t.end0}linkNeighbors(){return this.links.map(t=>this.otherEnd(t))}}class Model{static defaultWorld(t=16,e=t){return World.defaultOptions(t,e)}constructor(t=Model.defaultWorld()){this.worldOptions=t,this.resetModel()}initAgentSet(t,e,s){const r=new e(this,s,t);this[t]=r}resetModel(){this.ticks=0,this.world=new World(this.worldOptions),this.initAgentSet("patches",Patches,Patch),this.initAgentSet("turtles",Turtles,Turtle),this.initAgentSet("links",Links,Link)}reset(){this.resetModel()}tick(){this.ticks++}setup(){}step(){}patchBreeds(t){for(const e of t.split(" "))this[e]=this.patches.newBreed(e)}turtleBreeds(t){for(const e of t.split(" "))this[e]=this.turtles.newBreed(e)}linkBreeds(t){for(const e of t.split(" "))this[e]=this.links.newBreed(e)}}class RGBDataSet extends DataSet{static scaleFromMinMax(t,e){return(e-t)/(2**24-1)}constructor(t,e=0,s=1,r=Float32Array){super(t.width,t.height,new r(t.width*t.height));const i=util.createCtx(t.width,t.height);util.fillCtxWithImage(i,t);const n=util.ctxImageData(i),o=this.data;for(var h=0;h<o.length;h++){const t=n.data[4*h],r=n.data[4*h+1],i=n.data[4*h+2];o[h]=e+(256*t*256+256*r+i)*s}}}function toJSON(t,e=0,s=!0){let r=s;const i=["rectCache"];return JSON.stringify(t,(t,e)=>{if(i.includes(t))return;return Array.isArray(e)&&e.length>0&&Number.isInteger(e[0].id)&&!r?e.map(t=>t.id):(r=!1,e)},e)}function sampleObj(t){const e=toJSON({model:Object.keys(t),patches:t.patches.length,patch:t.patches.oneOf(),turtles:t.turtles.length,turtle:t.turtles.oneOf(),links:t.links.length,link:t.links.oneOf()});return JSON.parse(e)}function sampleJSON(t,e=0){return toJSON(sampleObj(t),e)}function printToPage(t,e=document.body){util.isObject(t)&&(t="<pre>"+(t=JSON.stringify(t,null,2))+"</pre>"),e.style.fontFamily="monospace",e.innerHTML+=t+"<br />"}var modelIO=Object.freeze({toJSON:toJSON,sampleObj:sampleObj,sampleJSON:sampleJSON,printToPage:printToPage});class Animator{constructor(t,e=60,s=!1){Object.assign(this,{model:t,rate:e,multiStep:s}),this.reset()}setRate(t,e=this.multistep){Object.assign(this,{rate:t,multiStep:e}),this.resetTimes()}start(){this.stopped&&(this.resetTimes(),this.stopped=!1,this.animate())}stop(){this.stopped=!0,this.animHandle&&cancelAnimationFrame(this.animHandle),this.timeoutHandle&&clearTimeout(this.timeoutHandle),this.animHandle=this.timeoutHandle=null}resetTimes(){this.startMS=this.now(),this.startTick=this.ticks,this.startDraw=this.draws}reset(){this.stop(),this.ticks=this.draws=0}step(){this.model.tick(),this.ticks++,this.model.step()}draw(){this.draws++,this.model.draw()}once(){this.step(),this.draw()}now(){return performance.now()}ms(){return this.now()-this.startMS}ticksPerSec(){const t=this.ticks-this.startTick;return 0===t?0:Math.round(1e3*t/this.ms())}drawsPerSec(){const t=this.draws-this.startDraw;return 0===t?0:Math.round(1e3*t/this.ms())}get fps(){return Math.max(this.drawsPerSec(),this.ticksPerSec())}toString(){return`ticks: ${this.ticks}, draws: ${this.draws}, rate: ${this.rate} tps/dps: ${this.ticksPerSec()}/${this.drawsPerSec()}`}animateSteps(){this.step(),this.stopped||(this.timeoutHandle=setTimeout(()=>this.animateSteps(),10))}animateDraws(){this.drawsPerSec()<this.rate&&(this.multiStep||this.step(),this.draw()),this.stopped||(this.animHandle=requestAnimationFrame(()=>this.animateDraws()))}animate(){this.multiStep&&this.animateSteps(),this.animateDraws()}}const Color={rgbaString(t,e,s,r=255){const i=(r/=255).toPrecision(2);return 1===r?`rgb(${t},${e},${s})`:`rgba(${t},${e},${s},${i})`},hslString(t,e,s,r=255){const i=(r/=255).toPrecision(4);return 1===r?`hsl(${t},${e}%,${s}%)`:`hsla(${t},${e}%,${s}%,${i})`},hexString(t,e,s,r=!0){if(r){const[r,i,n]=[t/17,e/17,s/17];if(util.isInteger(r)&&util.isInteger(i)&&util.isInteger(n))return this.hexShortString(r,i,n)}return`#${(s|e<<8|t<<16|16777216).toString(16).slice(-6)}`},hexShortString(t,e,s){if(t>15||e>15||s>15)throw Error(`hexShortString: one of ${[t,e,s]} > 15`);return`#${t.toString(16)}${e.toString(16)}${s.toString(16)}`},triString(t,e,s,r=255){return 255===r?this.hexString(t,e,s,!0):this.rgbaString(t,e,s,r)},sharedCtx1x1:util.createCtx(1,1),stringToUint8s(t){return this.sharedCtx1x1.clearRect(0,0,1,1),this.sharedCtx1x1.fillStyle=t,this.sharedCtx1x1.fillRect(0,0,1,1),this.sharedCtx1x1.getImageData(0,0,1,1).data},color(t,e,s,r=255){const i=new Uint8ClampedArray([t,e,s,r]);return i.pixelArray=new Uint32Array(i.buffer),Object.setPrototypeOf(i,ColorProto),i},isColor:t=>t&&t.constructor===Uint8ClampedArray&&t.pixelArray,toColor(t){if(this.isColor(t))return t;const e=this.color(0,0,0,0);if(util.isInteger(t))e.setPixel(t);else if("string"==typeof t)e.setCss(t);else if(Array.isArray(t)||util.isUintArray(t))e.setColor(...t);else{if(!util.isFloatArray(t))throw Error("toColor: invalid argument",t);e.setWebgl(t)}return e},randomColor(){const t=()=>util.randomInt(256);return this.color(t(),t(),t())}},ColorProto={__proto__:Uint8ClampedArray.prototype,setColor(t,e,s,r=255){this.checkColorChange(),this[0]=t,this[1]=e,this[2]=s,this[3]=r},set rgb(t){this.setColor(...t)},get rgb(){return this},setPixel(t){this.checkColorChange(),this.pixelArray[0]=t},getPixel(){return this.pixelArray[0]},get pixel(){return this.getPixel()},set pixel(t){this.setPixel(t)},setCss(t){return this.setColor(...Color.stringToUint8s(t))},getCss(){return null==this.string&&(this.string=Color.triString(...this)),this.string},get css(){return this.getCss()},set css(t){this.setCss(t)},setWebgl(t){this.setColor(255*t[0],255*t[1],255*t[2],4===t.length?255*t[3]:void 0)},getWebgl(){if(null==this.floatArray){const t=[this[0]/255,this[1]/255,this[2]/255];255!==this[3]&&t.push(this[3]/255),this.floatArray=new Float32Array(t)}return this.floatArray},get webgl(){return this.getWebgl()},set webgl(t){this.setWebgl(t)},checkColorChange(){this.string=null,this.floatArray=null},equals(t){return this.getPixel()===t.getPixel()},toString(){return`[${Array.from(this).toString()}]`},rgbDistance(t,e,s){const[r,i,n]=this,o=Math.round((r+t)/2),[h,a,l]=[r-t,i-e,n-s],[c,u,d]=[h*h,a*a,l*l];return((512+o)*c>>8)+4*u+((767-o)*d>>8)}},ColorMap={gradientImageData(t,e,s){e=e.map(t=>Array.isArray(t)?Color.rgbaString(...t):t);const r=util.createCtx(t,1);s||(s=util.aRamp(0,1,e.length));const i=r.createLinearGradient(0,0,t,0);return util.repeat(e.length,t=>i.addColorStop(s[t],e[t])),r.fillStyle=i,r.fillRect(0,0,t,1),util.ctxImageData(r).data},typedArraytoColors(t){const e=[];return util.step(t.length,4,s=>e.push(Color.color(...t.subarray(s,s+4)))),e.typedArray=t,e},arraysToColors(t){const e=new Uint8ClampedArray(4*t.length);return util.repeat(t.length,s=>{const r=t[s];3===r.length&&r.push(255),e.set(r,4*s)}),this.typedArraytoColors(e)},permuteArrays(t,e=t,s=t){const r=[];for(const i of s)for(const s of e)for(const e of t)r.push([e,s,i]);return r},permuteRGBColors(t,e=t,s=t){const r=[t,e,s].map(t=>util.aIntRamp(0,255,t));return this.permuteArrays(...r)},ColorMapProto:{__proto__:Array.prototype,createIndex(){this.index=[],util.repeat(this.length,t=>{const e=this[t].getPixel();this.index[e]=t,this.cssNames&&(this.index[this.cssNames[t]]=t)})},randomIndex(){return util.randomInt(this.length)},randomColor(){return this[this.randomIndex()]},indexOf(t){if(this.index)return this.index[t.getPixel()];for(let e=0;e<this.length;e++)if(t.equals(this[e]))return e},scaleColor(t,e,s){t=util.clamp(t,e,s);const r=util.lerpScale(t,e,s);return this[Math.round(util.lerp(0,this.length-1,r))]},webglArray(){return this.typedArray},toString(){return`${this.length} ${util.arraysToString(this)}`},rgbClosestIndex(t,e,s){let r=1/0,i=0;for(var n=0;n<this.length;n++){const o=this[n].rgbDistance(t,e,s);if(o<r&&(r=o,i=n,0===o))return i}return i},rgbClosestColor(t,e,s){return this[this.rgbClosestIndex(t,e,s)]},cubeClosestIndex(t,e,s){const r=this.cube,i=r.map(t=>255/(t-1)),n=[t,e,s].map((t,e)=>Math.round(t/i[e])),[o,h,a]=n;return o+h*r[0]+a*r[0]*r[1]},cubeClosestColor(t,e,s){return this[this.cubeClosestIndex(t,e,s)]},closestIndex(t,e,s){return this.cube?this.cubeClosestIndex(t,e,s):this.rgbClosestIndex(t,e,s)},closestColor(t,e,s){return this[this.closestIndex(t,e,s)]}},basicColorMap(t){return t=this.arraysToColors(t),Object.setPrototypeOf(t,this.ColorMapProto),t},grayColorMap(t=0,e=255,s=e-t+1){const r=util.aIntRamp(t,e,s);return this.basicColorMap(r.map(t=>[t,t,t]))},rgbColorCube(t,e=t,s=t){const r=this.permuteRGBColors(t,e,s),i=this.basicColorMap(r);return i.cube=[t,e,s],i},rgbColorMap(t,e,s){const r=this.permuteArrays(t,e,s);return this.basicColorMap(r)},hslColorMap(t,e=[100],s=[50]){const r=this.permuteArrays(t,e,s).map(t=>Color.toColor(Color.hslString(...t)));return this.basicColorMap(r)},gradientColorMap(t,e,s){const r=this.gradientImageData(t,e,s),i=this.typedArraytoColors(r);return Object.setPrototypeOf(i,this.ColorMapProto),i},jetColors:[[0,0,127],[0,0,255],[0,127,255],[0,255,255],[127,255,127],[255,255,0],[255,127,0],[255,0,0],[127,0,0]],basicColorNames:"white silver gray black red maroon yellow orange olive lime green cyan teal blue navy magenta purple".split(" "),cssColorMap(t,e=!1){const s=t.map(t=>Color.stringToUint8s(t)),r=this.basicColorMap(s);return r.cssNames=t,e&&(t.forEach((t,e)=>{r[t]=r[e]}),r.cyan&&(r.aqua=r.cyan),r.magenta&&(r.fuchsia=r.magenta)),r},LazyMap(t,e){return Object.defineProperty(this,t,{value:e,enumerable:!0}),e},get Gray(){return this.LazyMap("Gray",this.grayColorMap())},get LightGray(){return this.LazyMap("LightGray",this.grayColorMap(200))},get DarkGray(){return this.LazyMap("DarkGray",this.grayColorMap(0,100))},get Jet(){return this.LazyMap("Jet",this.gradientColorMap(256,this.jetColors))},get Rgb256(){return this.LazyMap("Rgb256",this.rgbColorCube(8,8,4))},get Rgb(){return this.LazyMap("Rgb",this.rgbColorCube(16))},get Basic16(){return this.LazyMap("Basic16",this.cssColorMap(this.basicColorNames,!0))}};class Controller{constructor(t,e){this.model=t,this.controlList=e,this.gui=new dat.GUI,util.forEach(this.controlList,(t,e)=>{this.addControl(e,t),console.log(e,t),this.addUI(this.model,e,t)})}addControl(t,e){let s=null;const r=util.typeOf(e.extent),i=util.typeOf(e.value);if("undefined"!==i&&(this.model[t]=e.value),"undefined"===r)"boolean"===i&&(s="toggle"),"string"!==i&&"number"!==i||(s="listen"===e.cmd?"monitor":"input"),"undefined"===i&&(s="button");else if("array"===r){const t=util.typeOf(e.extent[0]);"number"===t&&(s="slider"),"string"===t&&(s="chooser")}else"object"===r&&(s="chooser");if(!s)throw Error("Controls.addControl, no functionType");e.type=s}addUI(t,e,s){const{extent:r,type:i,cmd:n}=s;let o;switch(i){case"slider":const[s,n,h=1]=r;o=this.gui.add(t,e,s,n).step(h);break;case"chooser":o=this.gui.add(t,e,r);break;case"button":case"toggle":o=this.gui.add(t,e);break;case"input":case"monitor":o=this.gui.add(t,e);break;default:throw Error(`Controller.addUI: bad type: ${i}`)}n&&("listen"===n?o.listen():o.onChange(n)),s.control=o}}class Link$1 extends Link{static defaultVariables(){return{typedColor:null}}constructor(){super(),Object.assign(this,Link$1.defaultVariables())}setColor(t){const e=Color.toColor(t),s=this.links.renderer.fixedColor;s&&!e.equals(s)?util.warn(`links.setColor: fixedColor != color ${s.toString()}`):this.typedColor=e}getColor(){return this.typedColor}set color(t){this.setColor(t)}get color(){return this.getColor()}}class Links$1 extends Links{create(t,e,s){const r=super.create(t,e,s);return r.forEach(t=>{t.color||(t.color=this.model.randomColor())}),r}test(){console.log(this.map(t=>t.id))}}class Patches$1 extends Patches{constructor(t,e,s){super(t,e,s),this.isBreedSet()||this.setPixels()}setPixels(){const{numX:t,numY:e}=this.model.world;this.pixels={ctx:util.createCtx(t,e)},this.setImageData()}setImageData(){const t=this.pixels;t.imageData=util.ctxImageData(t.ctx),t.data8=t.imageData.data,t.data=new Uint32Array(t.data8.buffer)}setDefault(t,e){"color"===t?(this.ask(t=>{t.setColor(e)}),util.logOnce("patches.setDefault(color, value): color default not supported. Clearing to value")):super.setDefault(t,e)}installPixels(){const t=this.pixels;return t.ctx.putImageData(t.imageData,0,0),t}importColors(t){util.imagePromise(t).then(t=>this.installColors(t))}installColors(t){util.fillCtxWithImage(this.pixels.ctx,t),this.setImageData()}scaleColors(t,e,s,r){this.ask(i=>{i.setColor(t.scaleColor(i[e],s,r))})}test(){console.log(this.map(t=>t.id))}}class Patch$1 extends Patch{setColor(t){this.patches.pixels.data[this.id]=Color.toColor(t).getPixel()}getColor(t=null){const e=this.patches.pixels.data[this.id];return t?(t.pixel=e,t):Color.toColor(e)}get color(){return this.getColor()}set color(t){this.setColor(t)}}class Turtles$1 extends Turtles{create(t=1,e=(t=>{})){return util.repeat(t,(t,s)=>{const r=this.addAgent();r.theta=util.randomFloat(2*Math.PI),e(r),r.color||(r.color=this.model.randomColor()),s.push(r)})}test(){console.log(this.map(t=>t.id))}}class Turtle$1 extends Turtle{static defaultVariables(){return{size:1,sprite:null,typedColor:null,typedStrokeColor:null,shapeFcn:"default"}}constructor(){super(),Object.assign(this,Turtle$1.defaultVariables())}setSprite(t=null){if(t)this.sprite=t;else{let{shape:t,color:e,strokeColor:s}=this;const r="2"===t.slice(-1);t=t||"default",e=e||this.model.randomColor(),s=r?s||this.model.randomColor():null,this.sprite=this.model.spriteSheet.newSprite(t,e,s)}return this.sprite}checkSprite(){if(this.turtles.renderer.useSprites)if(this.turtles.settingDefault(this)){const{shape:t,typedColor:e,typedStrokeColor:s}=this,r="2"===t.slice(-1);t&&e&&(!r||s)&&(this.sprite=this.model.spriteSheet.newSprite(t,e,s))}else this.sprite=null}setSize(t){this.size=t}setColor(t){const e=Color.toColor(t),s=this.turtles.renderer.fixedColor;s?util.warn(`turtle.setColor: fixedColor ${s.toString()}`):this.typedColor=e,this.checkSprite()}getColor(){return this.sprite?this.sprite.color:this.typedColor}set color(t){this.setColor(t)}get color(){return this.getColor()}setStrokeColor(t){const e=Color.toColor(t),s=this.turtles.renderer.fixedColor;s?util.warn(`turtle.setStrokeColor: fixedColor ${s.toString()}`):this.typedStrokeColor=e,this.checkSprite()}getStrokeColor(){return this.sprite?this.sprite.strokeColor:this.typedStrokeColor}set strokdColor(t){this.setStrokeColor(t)}get strokdColor(){return this.getStrokeColor()}setShape(t){const e=this.turtles.renderer.fixedShape;e?util.warn(`turtle.setShape: fixedShape ${e}`):this.shapeFcn=t,this.checkSprite()}getShape(){return this.sprite?this.sprite.src:this.shapeFcn}set shape(t){this.setShape(t)}get shape(){return this.getShape()}}class SpriteSheet{constructor(t=64,e=16,s=!0){Object.assign(this,{spriteSize:t,cols:e,usePowerOf2:s}),this.rows=1,this.nextCol=0,this.nextRow=0,this.sprites={},this.paths=Object.assign({},paths),s&&this.checkPowerOf2(),this.ctx=util.createCtx(this.width,this.height),this.texture=null}get width(){return this.spriteSize*this.cols}get height(){return this.spriteSize*this.rows}get nextX(){return this.spriteSize*this.nextCol}get nextY(){return this.spriteSize*this.nextRow}get id(){return Object.keys(this.sprites).length}clear(){Object.assign(this.ctx.canvas,{width:this.width,height:this.spriteSize})}newSprite(t,e,s){const r=util.isImageable(t);r&&!e&&(e="red"),e&&(e=Color.toColor(e)),s&&(s=Color.toColor(s));const i=this.spriteName(t,e,s);if(this.sprites[i])return this.sprites[i];const n=r?this.addImage(t):this.addDrawing(t,e,s);return Object.assign(n,{src:t,color:e,strokeColor:s}),this.sprites[i]=n,n}installDrawFcn(t,e=t.name){this.paths[e]=t}spriteName(t,e,s){let r;if(util.isImageable(t))r=(r=(r=t.src).replace(/^.*\//,"")).replace(/\..*/,".img");else{(r=t.name||t).endsWith("2")||(s=null),r=`${r}${e.css}${s?s.css:""}`}return r}addImage(t){this.checkSheetSize();const[e,s,r]=[this.nextX,this.nextY,this.spriteSize];this.ctx.drawImage(t,e,s,r,r);const i=this.id,{nextRow:n,nextCol:o}=this,h={id:i,x:e,y:s,row:n,col:o,size:r,sheet:this};return h.uvs=this.getUVs(h),this.incrementRowCol(),this.texture&&(this.texture.needsUpdate=!0),h}addDrawing(t,e,s,r=!0){const i=this.createFcnCanvas(t,e,s,r);return this.addImage(i)}oneOf(){return util.oneValOf(this.sprites)}checkSheetSize(){this.nextRow===this.rows&&(this.rows=this.usePowerOf2?2*this.rows:this.rows+1,util.resizeCtx(this.ctx,this.width,this.height),util.forEach(this.sprites,t=>{t.uvs=this.getUVs(t)}))}incrementRowCol(){this.nextCol+=1,this.nextCol<this.cols||(this.nextCol=0,this.nextRow+=1)}createFcnCanvas(t,e,s,r=!0){const i=util.createCtx(this.spriteSize,this.spriteSize);i.fillStyle=e.css||e,s&&(i.strokeStyle=s.css||s),r&&(i.scale(this.spriteSize/2,this.spriteSize/2),i.translate(1,1),i.beginPath()),util.isString(t)?this.paths[t](i):t(i),r&&(i.closePath(),i.fill());const n=t.name||t;return i.canvas.src=`${n}${e}`,i.canvas}getUVs(t){const{row:e,col:s}=t,{rows:r,cols:i}=this,n=s/i,o=(r-(e+1))/r,h=(s+1)/i,a=(r-e)/r;return[n,o,h,o,h,a,n,a]}checkPowerOf2(){const{width:t,height:e}=this;if(!util.isPowerOf2(t)||!util.isPowerOf2(e))throw Error(`SpriteSheet non power of 2: ${t}x${e}`)}}const paths={poly(t,e){e.forEach((e,s)=>{0===s?t.moveTo(e[0],e[1]):t.lineTo(e[0],e[1])})},default(t){this.dart(t)},arrow(t){this.poly(t,[[1,0],[0,1],[0,.4],[-1,.4],[-1,-.4],[0,-.4],[0,-1]])},bug(t){t.strokeStyle=t.fillStyle,this.bug2(t)},bug2(t){t.lineWidth=.1,this.poly(t,[[.8,.45],[.4,0],[.8,-.45]]),t.stroke(),t.beginPath(),t.arc(.24,0,.26,0,2*Math.PI),t.arc(-.1,0,.26,0,2*Math.PI),t.arc(-.54,0,.4,0,2*Math.PI)},circle(t){t.arc(0,0,1,0,2*Math.PI)},dart(t){this.poly(t,[[1,0],[-1,.8],[-.5,0],[-1,-.8]])},frame(t){t.fillRect(-1,-1,2,2),t.fill(),t.clearRect(-.6,-.6,1.2,1.2)},frame2(t){t.fillRect(-1,-1,2,2),t.fill(),t.fillStyle=t.strokeStyle,t.fillRect(-.6,-.6,1.2,1.2)},person(t){t.strokeStyle=t.fillStyle,this.person2(t)},person2(t){this.poly(t,[[.3,-.4],[.6,0],[.25,.2],[.25,-.1],[.2,.3],[.5,1],[.1,1],[0,.5],[-.1,1],[-.5,1],[-.2,.3],[-.25,-.1],[-.25,.2],[-.6,0],[-.3,-.4]]),t.closePath(),t.fill(),t.beginPath(),t.fillStyle=t.strokeStyle,t.arc(0,-.7,.3,0,2*Math.PI)},ring(t){const[e,s]=[1,.6];t.arc(0,0,e,0,2*Math.PI,!1),t.lineTo(s,0),t.arc(0,0,s,0,2*Math.PI,!0)},ring2(t){const[e,s]=[1,.6];t.arc(0,0,e,0,2*Math.PI),t.closePath(),t.fill(),t.beginPath(),t.fillStyle=t.strokeStyle,t.arc(0,0,s,0,2*Math.PI)},square(t){t.fillRect(-1,-1,2,2)},triangle(t){this.poly(t,[[1,0],[-1,-.8],[-1,.8]])}};class BaseMesh{constructor(t,e=this.constructor.options()){const{scene:s,model:r}=t;Object.assign(this,{scene:s,model:r,view:t,options:e}),this.mesh=null,this.name=this.constructor.name,this.fixedColor=e.color,this.fixedSize=e.pointSize,this.fixedShape="PatchesMesh"===this.name?"Patch":"PointsMesh"===this.name?"Point":"LinksMesh"===this.name?"Link":void 0,this.useSprites=null!=this.name.match(/sprites/i)}dispose(){this.mesh&&(this.mesh.parent!==this.scene&&console.log("mesh parent not scene"),this.mesh.parent.remove(this.mesh),this.mesh.geometry.dispose(),this.mesh.material.dispose(),this.mesh.material.map&&this.mesh.material.map.dispose())}init(){throw Error("init is abstract, must be overriden")}update(){throw Error("update is abstract, must be overriden")}createQuad(t,e=0){return{vertices:[-t,-t,e,t,-t,e,t,t,e,-t,t,e],indices:[0,1,2,0,2,3]}}get spriteSheetTexture(){if(!this.model.spriteSheet.texture){const t=new THREE.CanvasTexture(this.model.spriteSheet.ctx.canvas);this.model.spriteSheet.texture=t}return this.model.spriteSheet.texture}}class CanvasMesh extends BaseMesh{init(t){this.mesh&&this.dispose();const{textureOptions:e,z:s}=this.options;Object.assign(this,{canvas:t,z:s,textureOptions:e});const{width:r,height:i,numX:n,numY:o,centerX:h,centerY:a}=this.model.world,l=new THREE.CanvasTexture(t);for(const t in e)l[t]=THREE[e[t]];const c=new THREE.PlaneGeometry(r,i,n,o);c.translate(1*h,1*a,0);const u=new THREE.MeshBasicMaterial({map:l,shading:THREE.FlatShading,side:THREE.DoubleSide,transparent:!0});this.mesh=new THREE.Mesh(c,u),this.mesh.position.z=s,this.scene.add(this.mesh)}update(){this.mesh.material.map.needsUpdate=!0}}class PatchesMesh extends CanvasMesh{static options(){return{textureOptions:{minFilter:"NearestFilter",magFilter:"NearestFilter"},z:1}}init(t){super.init(t.pixels.ctx.canvas)}update(t){t.installPixels(),super.update()}}class QuadSpritesMesh extends BaseMesh{static options(){return{z:2}}constructor(t,e){super(t,e),this.unitQuad=this.createQuad(.5,0)}init(){this.mesh&&this.dispose();const t=this.spriteSheetTexture,e=new Float32Array,s=new Float32Array,r=new Uint32Array,i=new THREE.BufferGeometry;i.addAttribute("position",new THREE.BufferAttribute(e,3)),i.addAttribute("uv",new THREE.BufferAttribute(s,2)),i.setIndex(new THREE.BufferAttribute(r,1));const n=new THREE.MeshBasicMaterial({map:t,alphaTest:.5,side:THREE.DoubleSide});this.mesh=new THREE.Mesh(i,n),this.mesh.position.z=this.options.z,this.scene.add(this.mesh)}update(t){const e=this.mesh,{vertices:s,indices:r}=this.unitQuad,i=e.geometry.getAttribute("position"),n=e.geometry.getAttribute("uv"),o=e.geometry.getIndex(),h=new Float32Array(s.length*t.length),a=[],l=[];for(let e=0;e<t.length;e++){const i=t[e];i.sprite||i.setSprite();const n=i.size,o=i.theta,c=Math.cos(o),u=Math.sin(o),d=e*s.length;for(let t=0;t<s.length;t+=3){const e=s[t],r=s[t+1],o=i.x,a=i.y;h[t+d]=1*(n*(e*c-r*u)+o),h[t+d+1]=1*(n*(e*u+r*c)+a),h[t+d+2]=1*i.z}l.push(...r.map(t=>t+4*e)),a.push(...i.sprite.uvs)}i.setArray(h),i.needsUpdate=!0,n.setArray(new Float32Array(a)),n.needsUpdate=!0,o.setArray(new Uint32Array(l)),o.needsUpdate=!0}}class PointsMesh extends BaseMesh{static options(){return{pointSize:1,color:null,z:2}}init(){this.mesh&&this.dispose();const t=this.options.pointSize,e=this.options.color?new THREE.Color(...this.options.color):null,s=new THREE.BufferGeometry;s.addAttribute("position",new THREE.BufferAttribute(new Float32Array,3)),null==e&&s.addAttribute("color",new THREE.BufferAttribute(new Float32Array,3));const r=e?new THREE.PointsMaterial({size:t,color:e}):new THREE.PointsMaterial({size:t,vertexColors:THREE.VertexColors});this.mesh=new THREE.Points(s,r),this.mesh.position.z=this.options.z,this.scene.add(this.mesh)}update(t){const e=this.mesh.geometry.getAttribute("position"),s=this.mesh.geometry.getAttribute("color"),r=[],i=null==s?null:[];for(let e=0;e<t.length;e++){const{x:s,y:n,z:o,color:h}=t[e];r.push(1*s,1*n,1*o),null!=i&&i.push(...h.webgl)}e.setArray(new Float32Array(r)),e.needsUpdate=!0,i&&(s.setArray(new Float32Array(i)),s.needsUpdate=!0)}}class LinksMesh extends BaseMesh{static options(){return{color:null,z:1.5}}init(){this.mesh&&this.dispose();const t=this.options.color?new THREE.Color(...this.options.color):null,e=new THREE.BufferGeometry;e.addAttribute("position",new THREE.BufferAttribute(new Float32Array,3)),null==t&&e.addAttribute("color",new THREE.BufferAttribute(new Float32Array,3));const s=t?new THREE.LineBasicMaterial({color:t}):new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors});this.mesh=new THREE.LineSegments(e,s),this.mesh.position.z=this.options.z,this.scene.add(this.mesh)}update(t){const e=[],s=this.options.color?null:[];for(let r=0;r<t.length;r++){const{end0:i,end1:n,color:o}=t[r],{x:h,y:a,z:l}=i,{x:c,y:u,z:d}=n,p=1;e.push(h*p,a*p,l*p,c*p,u*p,d*p),s&&s.push(...o.webgl,...o.webgl)}const r=this.mesh.geometry.getAttribute("position");if(r.setArray(new Float32Array(e)),r.needsUpdate=!0,s){const t=this.mesh.geometry.getAttribute("color");t.setArray(new Float32Array(s)),t.needsUpdate=!0}}}var ThreeMeshes={BaseMesh:BaseMesh,CanvasMesh:CanvasMesh,PatchesMesh:PatchesMesh,QuadSpritesMesh:QuadSpritesMesh,PointsMesh:PointsMesh,LinksMesh:LinksMesh};class ThreeView{static defaultOptions(t=!0,e=!0){const s={Renderer:ThreeView,orthoView:!1,clearColor:0,useAxes:t,useGrid:t,useControls:t,spriteSize:64,patches:{meshClass:"PatchesMesh"},turtles:{meshClass:"QuadSpritesMesh"},links:{meshClass:"LinksMesh"}};return util.forEach(s,(t,e)=>{if(t.meshClass){const e=ThreeMeshes[t.meshClass].options();t.options=e}}),s}static printMeshOptions(){const t={};for(const e in ThreeMeshes){ThreeMeshes[e].options&&(t[e]={options:ThreeMeshes[e].options()})}const e=util.objectToString(t);console.log(e)}constructor(t,e={}){if(this.model=t,Object.assign(this,ThreeMeshes.defaultOptions),Object.assign(this,e),this.Renderer!==ThreeView)throw Error("ThreeView ctor: Renderer not ThreeView",this.renderer);this.initThree(),this.initThreeHelpers()}initThree(){const{clientWidth:t,clientHeight:e}=this.model.div,{orthoView:s,clearColor:r}=this,{width:i,height:n}=this.model.world,[o,h]=[i/2,n/2],a=new THREE.OrthographicCamera(-o,o,h,-h,1,20*i);a.position.set(0,0,10*i),a.up.set(0,0,1);const l=new THREE.PerspectiveCamera(45,t/e,1,1e4);l.position.set(i,-i,i),l.up.set(0,0,1);const c=new THREE.Scene,u=s?a:l,d=new THREE.WebGLRenderer;d.setPixelRatio(window.devicePixelRatio),d.setSize(t,e),d.setClearColor(r),this.model.div.appendChild(d.domElement),window.addEventListener("resize",()=>{this.resize()}),Object.assign(this,{scene:c,camera:u,renderer:d,orthographicCam:a,perspectiveCam:l})}resize(){const{clientWidth:t,clientHeight:e}=this.model.div,{width:s,height:r}=this.model.world;if(this.orthoView){const i=Math.min(t/s,e/r);this.renderer.setSize(i*s,i*r)}else this.camera.aspect=t/e,this.camera.updateProjectionMatrix(),this.renderer.setSize(t,e)}toggleCamera(){this.orthoView=!this.orthoView,this.orthoView?this.camera=this.orthographicCam:this.camera=this.perspectiveCam,this.resize()}snapshot(t=!0){const{scene:e,renderer:s,model:r}=this,i=t&&this.camera===this.perspectiveCam;i&&(this.toggleCamera(),r.draw(!0)),s.render(e,this.camera);const n=s.domElement.toDataURL();return i&&this.toggleCamera(),n}initThreeHelpers(){const{scene:t,renderer:e,camera:s}=this,{useAxes:r,useGrid:i,useControls:n}=this,{width:o}=this.model.world,h={};r&&(h.axes=new THREE.AxisHelper(1.5*o/2),t.add(h.axes)),i&&(h.grid=new THREE.GridHelper(1.25*o,10),h.grid.rotation.x=THREE.Math.degToRad(90),t.add(h.grid)),n&&(h.controls=new THREE.OrbitControls(s,e.domElement)),Object.assign(this,h)}}class Model$1 extends Model{static defaultWorld(t,e){return super.defaultWorld(t,e)}static defaultRenderer(){return ThreeView.defaultOptions()}static printDefaultViewOptions(){ThreeView.printMeshOptions()}constructor(t=document.body,e=Model$1.defaultWorld(),s=Model$1.defaultRenderer()){super(e),this.div=util.isString(t)?document.getElementById(t):t,this.renderOptions=s,this.anim=new Animator(this),this.colorMap=ColorMap.Basic16,this.spriteSheet=new SpriteSheet(s.spriteSize),this.view=new s.Renderer(this,s),this.meshes={},util.forEach(s,(t,e)=>{if(t.meshClass){const s=ThreeMeshes[t.meshClass].options();Object.assign(s,t.options),s.color&&(s.color=Color.toColor(new Float32Array(s.color))),this.meshes[e]=new ThreeMeshes[t.meshClass](this.view,s)}}),this.resetView()}initAgentRenderer(t){const e=this.meshes[t.name];t.renderer=e,e.fixedColor&&t.setDefault("color",e.fixedColor),e.fixedShape&&t.setDefault("shape",e.fixedShape),e.init(t)}resetModel(){this.ticks=0,this.world=new World(this.worldOptions),this.initAgentSet("patches",Patches$1,Patch$1),this.initAgentSet("turtles",Turtles$1,Turtle$1),this.initAgentSet("links",Links$1,Link$1)}resetView(){this.anim.reset(),this.refreshLinks=this.refreshTurtles=this.refreshPatches=!0,this.initAgentRenderer(this.patches),this.initAgentRenderer(this.turtles),this.initAgentRenderer(this.links)}reset(){this.resetModel(),this.resetView()}restart(){this.reset(),this.setup(),this.start()}randomColor(){return this.colorMap.randomColor()}start(){return this.anim.start(),this}stop(){this.anim.stop()}once(){this.stop(),this.anim.once()}draw(t=this.anim.stopped||1===this.anim.draws){this.div&&((t||this.refreshPatches)&&this.patches.length>0&&this.patches.renderer.update(this.patches),(t||this.refreshTurtles)&&this.turtles.length>0&&this.turtles.renderer.update(this.turtles),(t||this.refreshLinks)&&this.links.length>0&&this.links.renderer.update(this.links),this.view.renderer.render(this.view.scene,this.view.camera))}}class Mouse{constructor(t,e,s=null){Object.assign(this,{element:t,world:e,callback:s}),this.mouseDown=(t=>this.handleMouseDown(t)),this.mouseUp=(t=>this.handleMouseUp(t)),this.mouseMove=(t=>this.handleMouseMove(t))}resetParams(){this.xCor=this.yCor=NaN,this.moved=this.down=!1}start(){return this.element.addEventListener("mousedown",this.mouseDown),document.body.addEventListener("mouseup",this.mouseUp),this.element.addEventListener("mousemove",this.mouseMove),this.resetParams(),this}stop(){return this.element.removeEventListener("mousedown",this.mouseDown),document.body.removeEventListener("mouseup",this.mouseUp),this.element.removeEventListener("mousemove",this.mouseMove),this.resetParams(),this}generalHandler(t,e,s){this.down=e,this.moved=s,this.setXY(t),null!=this.callback&&this.callback(t)}handleMouseDown(t){this.action="down",this.generalHandler(t,!0,!1)}handleMouseUp(t){this.action="up",this.generalHandler(t,!1,!1)}handleMouseMove(t){this.action=this.down?"drag":"move",this.generalHandler(t,this.down,!0)}setXY(t){const e=this.element.getBoundingClientRect(),s=t.clientX-e.left,r=t.clientY-e.top;Object.assign(this,this.pixelXYtoPatchXY(s,r))}patchSize(){const{numX:t,numY:e}=this.world,{clientWidth:s,clientHeight:r}=this.element,i=s/t,n=r/e;if(i!==n)throw Error(`Mouse patchSize: xSize, ySize differ ${i}, ${n}`);return i}pixelXYtoPatchXY(t,e){const s=this.patchSize(),{minXcor:r,maxYcor:i}=this.world;return{x:r+t/s,y:i-e/s}}}export{AgentArray,AgentSet,Animator,Color,ColorMap,Controller,DataSet,Link$1 as Link,Links$1 as Links,Model$1 as Model,Mouse,Patch$1 as Patch,Patches$1 as Patches,RGBDataSet,SpriteSheet,ThreeView,ThreeMeshes,Turtle$1 as Turtle,Turtles$1 as Turtles,World,util};
